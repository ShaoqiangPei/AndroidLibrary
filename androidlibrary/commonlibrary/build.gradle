apply plugin: 'com.android.library'

//引用butterknife
apply plugin: 'com.jakewharton.butterknife'

//android配置
def config = rootProject.ext.android
//相关库依赖
def librarys = rootProject.ext.supportDependencies

android {
    compileSdkVersion config.compileSdkVersion

    defaultConfig {
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName
        testInstrumentationRunner config.testInstrumentationRunner
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

//==========以下添加是为了让自己的库发布到JitPack上仍能显示注释==================
    // 打包源码jar
    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }
    //编译groovy代码时采用 UTF-8
    tasks.withType(GroovyCompile) {
        groovyOptions.encoding = "MacRoman"
    }

    //编译JAVA文件时采用UTF-8
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    task javadoc(type: Javadoc) {
        failOnError false
        source = android.sourceSets.main.java.sourceFiles
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += configurations.compile
    }

    // 打包文档jar
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
//==========以上添加是为了让自己的库发布到JitPack上仍能显示注释==================
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //==========基础库============
    implementation librarys.implementation_support_appcompat
    implementation librarys.implementation_support_v4
    implementation librarys.implementation_suppout_design
    implementation librarys.implementation_recyclerview_v7
    implementation librarys.implementation_constraint_layout
    androidTestImplementation librarys.testImplementation_test_junit
    androidTestImplementation librarys.androidTestImplementation_support_runner
    androidTestImplementation librarys.androidTestImplementation_support_espresso

//    //===============网络库============
//    //retroefit2.0
//    api librarys.compile_retrofit2
//    //retrofit2.0对gson支持
//    api librarys.compile_retrofit2_converter_gson
//    //retrofit2.0支持内置log打印
//    api librarys.compile_okhttp3
//    api librarys.compile_logging_interceptor
//    //添加Retrofit2.0对Rx的支持(RxJava2.x时使用，RxJava1.x时不支持)
//    api librarys.compile_retrofit2_adapter_rxjava2
//    //rxjava2.x
//    api librarys.compile_rx_android2
//    api librarys.compile_rx_java2

    //================第三方库============
    //LitePal
    implementation librarys.implementation_litepal_core
    //PermissionGen
    implementation librarys.implementation_permissionenGen
    //gson(引入Retrofit网络框架后,需要替换成retrofit2_converter_gson)
    implementation librarys.implementation_gson
    //butterKnife
    implementation librarys.implementation_butterknife
    annotationProcessor librarys.annotationProcessor_butterknife_compiler
    //PermissionGen
    implementation librarys.implementation_permissionenGen


//    //Brvah适配器
//    api librarys.compile_BaseRecyclerViewAdapterHelper
//    //Glide
//    api librarys.compile_glide4
//    annotationProcessor librarys.annotationProcessor_glide4_compiler
//    //loadingDialog
//    implementation librarys.compile_loading_dialog
//    //selector框架
//    api librarys.compile_DevShapeUtils
}
